# main.py

# ‚îÄ‚îÄ 1) Monkey-patch, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ EIO/SocketIO-disconnect-handlers
import engineio.base_client
engineio.base_client.BaseClient._handle_eio_disconnect = lambda *a, **k: None

import socketio.client
socketio.client.Client._handle_eio_disconnect = lambda *a, **k: None

# ‚îÄ‚îÄ 2) –û–±—ã—á–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import time
import logging
import threading
from collections import deque

import pandas as pd
from ta.momentum import RSIIndicator
from telegram import Bot
import socketio
import requests
import urllib3

import config

# ‚îÄ‚îÄ 3) –û—Ç–∫–ª—é—á–∞–µ–º InsecureRequestWarning (verify=False)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ‚îÄ‚îÄ 4) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger()

# ‚îÄ‚îÄ 5) Telegram-–±–æ—Ç
bot = Bot(token=config.TELEGRAM_TOKEN)

# ‚îÄ‚îÄ 6) HTTP-—Å–µ—Å—Å–∏—è (–¥–ª—è Engine.IO polling-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞)
session = requests.Session()
session.verify = False

# ‚îÄ‚îÄ 7) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Socket.IO-–∫–ª–∏–µ–Ω—Ç
sio = socketio.Client(http_session=session)

# ‚îÄ‚îÄ 8) –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤–µ—á–µ–π –∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
hist = {pair: deque(maxlen=100) for pair in config.OTC_PAIRS}
sent_signals = set()

def on_new_candle(pair: str, candle: dict):
    dq = hist[pair]
    dq.append({
        "time":  candle["from"],
        "open":  candle["open"],
        "high":  candle["high"],
        "low":   candle["low"],
        "close": candle["close"],
    })
    # –∂–¥—ë–º –º–∏–Ω–∏–º—É–º max_period+1
    if len(dq) < max(config.RSI_PERIODS) + 1:
        return

    df = pd.DataFrame(dq)
    dirs = []
    for p in config.RSI_PERIODS:
        r = RSIIndicator(df["close"], window=p).rsi().iloc[-1]
        if r > config.RSI_UPPER:
            dirs.append("DOWN")
        elif r < config.RSI_LOWER:
            dirs.append("UP")
        else:
            return

    if all(d == dirs[0] for d in dirs):
        txt = "–í–Ω–∏–∑" if dirs[0] == "DOWN" else "–í–≤–µ—Ä—Ö"
        ts  = df["time"].iloc[-1]
        key = (pair, ts, txt)
        if key not in sent_signals:
            sent_signals.add(key)
            msg = f"{pair} | —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—è {config.EXPIRATION_MIN} –º–∏–Ω | {txt}"
            try:
                bot.send_message(chat_id=config.TELEGRAM_CHAT_ID, text=msg)
                logger.info("‚úÖ Signal sent: %s", msg)
            except Exception as e:
                logger.error("Telegram error: %s", e)

# ‚îÄ‚îÄ 9) Socket.IO handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@sio.event
def connect():
    logger.info("üü¢ Connected to %s (polling)", config.PO_SOCKET_HOST)
    sio.emit("authenticate", {
        "email":    config.PO_EMAIL,
        "password": config.PO_PASSWORD
    })

@sio.on("auth_response")
def on_auth(data):
    if data.get("status") == "ok":
        logger.info("üîì Auth OK")
        for pair in config.OTC_PAIRS:
            sio.emit("subscribe_candles", {
                "instrument": pair,
                "timeframe":  60
            })
    else:
        logger.error("‚ùå Auth failed: %s", data)

@sio.on("candle")
def on_candle(msg):
    if msg.get("instrument") in config.OTC_PAIRS and msg.get("timeframe") == 60:
        on_new_candle(msg["instrument"], msg["candle"])

@sio.event
def disconnect(*args):
    logger.warning("üî¥ Disconnected, args=%s", args)

# ‚îÄ‚îÄ 10) Loop-—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç —Å —è–≤–Ω—ã–º EIO=3-handshake ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def start_polling():
    base = f"https://{config.PO_SOCKET_HOST}"
    # –≤ —Ä—É–∫—É –≤—à–∏—Ç EIO=3 –∏ polling
    handshake = f"/{config.PO_SOCKET_PATH}/?EIO=3&transport=polling"
    url = base + handshake

    while True:
        try:
            logger.info("üîÑ Connecting to %s ‚Ä¶", url)
            sio.connect(
                url,
                transports=["polling"],
                headers={"Origin": "https://pocketoption.com"},
                socketio_path="",      # –ø—É—Ç—å —É–∂–µ –≤ URL
                wait_timeout=20
            )
            sio.wait()
        except Exception as e:
            logger.error("‚ùå Connection error: %s", e)
        finally:
            try:
                sio.disconnect()
            except:
                pass
        logger.info("‚è≥ Reconnect in 5s‚Ä¶")
        time.sleep(5)

if __name__ == "__main__":
    threading.Thread(target=start_polling, daemon=True).start()
    logger.info("ü§ñ Bot is running. Ctrl+C to stop.")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("üõë Shutting down‚Ä¶")
        sio.disconnect()
