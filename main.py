# main.py

# 1) ¬´–ú–æ–Ω–∫–∏-–ø–∞—Ç—á¬ª —á—Ç–æ–±—ã Engine.IO/Socket.IO –Ω–µ –≤—ã–≤–∞–ª–∏–≤–∞–ª–∏—Å—å –Ω–∞ disconnect
import engineio.base_client
engineio.base_client.BaseClient._handle_eio_disconnect = lambda *args, **kwargs: None

import socketio.client
socketio.client.Client._handle_eio_disconnect    = lambda *args, **kwargs: None

# 2) –û–±—ã—á–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import time, logging, threading
from collections import deque

import pandas as pd
from ta.momentum import RSIIndicator
from telegram import Bot
import socketio
import requests
import config

import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# 3) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger()

# 4) Telegram
bot = Bot(token=config.TELEGRAM_TOKEN)

# 5) HTTP-—Å–µ—Å—Å–∏—è (–¥–ª—è polling-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ça)
session = requests.Session()
session.verify = False

# 6) Socket.IO –∫–ª–∏–µ–Ω—Ç (–±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ transports –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
sio = socketio.Client(http_session=session)

# 7) –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
hist = {p: deque(maxlen=100) for p in config.OTC_PAIRS}
sent = set()

def on_new_candle(pair: str, candle: dict):
    dq = hist[pair]
    dq.append({
        "time":  candle["from"],
        "open":  candle["open"],
        "high":  candle["high"],
        "low":   candle["low"],
        "close": candle["close"],
    })
    if len(dq) < max(config.RSI_PERIODS) + 1:
        return
    df = pd.DataFrame(dq)
    dirs = []
    for p in config.RSI_PERIODS:
        r = RSIIndicator(df["close"], window=p).rsi().iloc[-1]
        if r > config.RSI_UPPER:   dirs.append("DOWN")
        elif r < config.RSI_LOWER: dirs.append("UP")
        else: return
    if all(d == dirs[0] for d in dirs):
        txt = "–í–Ω–∏–∑" if dirs[0]=="DOWN" else "–í–≤–µ—Ä—Ö"
        ts  = df["time"].iloc[-1]
        key = (pair, ts, txt)
        if key not in sent:
            sent.add(key)
            msg = f"{pair} | —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—è {config.EXPIRATION_MIN} –º–∏–Ω | {txt}"
            try:
                bot.send_message(chat_id=config.TELEGRAM_CHAT_ID, text=msg)
                logger.info("‚úÖ Signal sent: %s", msg)
            except Exception as e:
                logger.error("Telegram error: %s", e)

# 8) Socket.IO-handlers
@sio.event
def connect():
    logger.info("üü¢ Connected to %s (polling)", config.PO_SOCKET_HOST)
    sio.emit("authenticate", {"email":config.PO_EMAIL, "password":config.PO_PASSWORD})

@sio.on("auth_response")
def on_auth(data):
    if data.get("status")=="ok":
        logger.info("üîì Auth OK")
        for p in config.OTC_PAIRS:
            sio.emit("subscribe_candles", {"instrument":p, "timeframe":60})
    else:
        logger.error("‚ùå Auth failed: %s", data)

@sio.on("candle")
def on_candle(msg):
    inst = msg.get("instrument")
    if inst in config.OTC_PAIRS and msg.get("timeframe")==60:
        on_new_candle(inst, msg.get("candle", {}))

@sio.event
def disconnect(*args):
    logger.warning("üî¥ Disconnected, args=%s", args)

# 9) –§—É–Ω–∫—Ü–∏—è loop-–∫–æ–Ω–Ω–µ–∫—Ç–∞ —Å polling-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º –∏ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–æ–º
def start_polling():
    url = f"https://{config.PO_SOCKET_HOST}"
    while True:
        try:
            logger.info("üîÑ Connecting to %s ‚Ä¶", url)
            sio.connect(
                url,
                transports=["polling"],
                headers={"Origin":"https://pocketoption.com"},
                socketio_path=config.PO_SOCKET_PATH,
                wait_timeout=20
            )
            sio.wait()
        except Exception as e:
            logger.error("‚ùå Connection error: %s", e)
        finally:
            try: sio.disconnect()
            except: pass
        logger.info("‚è≥ Reconnect in 5s‚Ä¶")
        time.sleep(5)

if __name__=="__main__":
    threading.Thread(target=start_polling, daemon=True).start()
    logger.info("ü§ñ Bot is running. Ctrl+C to stop.")
    try:
        while True: time.sleep(1)
    except KeyboardInterrupt:
        logger.info("üõë Shutting down‚Ä¶")
        sio.disconnect()
